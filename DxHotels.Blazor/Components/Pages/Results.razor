@inherits BasePage
@page "/results"
@using Microsoft.EntityFrameworkCore

<PageControl>
    <BodyContent>
        <div class="results-header" style="height: 130px;">
            <div class="content-column">
                <div class="map-image" style="width: unset; height: unset;">
                    <img border="0" src="@State.Metro_Area.Map_ImageUrl" />                
                </div>
                <h3>@State.Metro_Area.Area_Name</h3>
                <br />
                <span class="start-filter">@(new MarkupString(State.StartFilterText))</span>
            </div>
        </div>
        <div class="content-column results">
            <div class="results-summary">
                <span style="font-size: 36px; color: #f78119">RESULTS </span>
                <span style="font-size: 36px; color: #999999">@String.Format("{0} HOTELS", Hotels.Count())</span>
                <DxTagBox Data="@Tokens"
                            TData="string"
                            TValue="string" @bind-Tags="@Tokens" style="font-size: 16px; width: 100%" CssClass="token-box">
                </DxTagBox>
            </div>
        
            <div class="results-content">
                <DxGrid Data="@Hotels" PageSize="3" CustomizeElement="OnCustomizeElement">
                    <Columns>
                        <DxGridDataColumn FieldName="@nameof(Hotel.Hotel_Name)">

                        </DxGridDataColumn>
                    </Columns>
                    <DataColumnCellDisplayTemplate>
                    @{
                        var hotel = context.DataItem as Hotel;
                    }
                    <div class="item" style="border-bottom: none;">
                        <div class="hotel-image">
                            <a href="@GetHotelDetailsUrl(hotel.ID)">
                                <img src="@hotel.PrimaryPicture.Url" style="width: 140px; height: 140px;" width="140px" height="140px" />
                            </a>
                        </div>

                        <div class="hotel-common">
                            <a href="@GetHotelDetailsUrl(hotel.ID)" class="hotel-title" style="color: #ff8800;">
                                @hotel.Hotel_Name
                            </a>
                            <div class="hotel-address">
                                @hotel.Address<br />
                                @hotel.DetailsCity
                            </div>
                            <div class="hotel-stats">
                                <div class="stat">
                                    TYPE:
                                    <span style="font-size: 14px">@hotel.Hotel_Class</span>
                                </div>
                                <div class="stat">
                                    LOCATION:
                                    <span style="font-size: 14px">@hotel.Location_Rating</span>
                                </div>
                                <div class="stat">
                                    RATING:
                                    <span style="font-size: 14px">@hotel.Our_Rating</span>
                                    <img border="0" src="/Content/Images/star.png" style="margin-top: -5px" />
                                </div>
                            </div>
                            <DxRatingControl Readonly="false" Value="@Convert.ToDouble(hotel.Customer_Rating)" />
                            @* <dx:ASPxRatingControl ID="HotelCustomerRatingControl" runat="server" Value='<%# Eval("Customer_Rating") %>' ReadOnly="True" CssClass="rating-control"></dx:ASPxRatingControl> *@
                        </div>
                        <div class="hotel-right-block">
                            <div class="price">@string.Format("{0:C}", hotel.StartPrice)</div>
                            per night<br />
                            <DxButton RenderStyle="ButtonRenderStyle.Light" SizeMode="SizeMode.Large" Text="Book It" />
                        </div>
                        <div class="clear"></div>
                        <div class="hotel-description">
                            @hotel.Description
                        </div>
                    </div>
                    </DataColumnCellDisplayTemplate>
                </DxGrid>
            </div>
            <div class="results-filter">
                <DxFormLayout CssClass="w-100" CaptionPosition="CaptionPosition.Vertical">
                    <DxFormLayoutItem Caption="Search by City:" ColSpanSm="12">
                            <DxComboBox Data="@MetroAreas" Value="@State.Metro_Area" TextFieldName="@nameof(Metro_Area.Area_Name)" 
                                FilteringMode="DataGridFilteringMode.Contains"
                                ValueChanged="@((Metro_Area area) => SelectedAreaChanged(area))">
                            </DxComboBox>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Nightly Rate:" ColSpanSm="12">
                            <div class="d-flex p-1" style="width: 100%; border: 1px solid silver; background-color: white">
                                <div class="trackbar-label-l">@NightlyRateStart</div>
                            <div class="flex-grow-1">
                                <DevExtremeRangeSlider Min="@NightlyRateMin" Max="@NightlyRateMax" 
                                        @bind-Start="@NightlyRateStart" 
                                        @bind-End="@NightlyRateEnd" Width="100%" />
                            </div> 
                            <div class="trackbar-label-r">@NightlyRateEnd</div>
                        </div>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Customer Rating:" ColSpanSm="12">
                        <div class="d-flex p-1" style="width: 100%; border: 1px solid silver; background-color: white">
                            <div class="flex-grow-1">
                                <DevExtremeSlider Min="@CustomerRatingMin" Max="@CustomerRatingMax" 
                                    @bind-Value="@CustomerRating" Width="100%"  />
                            </div>
                            <div class="trackbar-label-r">@CustomerRating</div>
                        </div>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Our Rating:" ColSpanSm="12">
                        <DxListBox Data="@RatingData" @bind-SelectedValues="@SelectedRatings" Width="100%" 
                                SelectionMode="ListBoxSelectionMode.Multiple" ShowCheckboxes="true" 
                                TData="RatingItem" TValue="RatingItem">
                            <ItemDisplayTemplate Context="itemCtx">
                                <div>
                                    <img border="0" src="@itemCtx.DataItem.ImageUrl" />
                                </div>
                            </ItemDisplayTemplate>
                        </DxListBox>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem Caption="Location:" ColSpanSm="12">
                        <DxComboBox Data="@LocationData" @bind-Value="@SelectedLocation">

                        </DxComboBox>
                    </DxFormLayoutItem>
                    <DxFormLayoutItem ColSpanSm="12">
                        <DxButton RenderStyle="ButtonRenderStyle.Light" Text="Apply" CssClass="w-100" 
                            Click="@ApplyFilterButton_Click" />
                    </DxFormLayoutItem>
                </DxFormLayout>

            </div>
            <div style="clear: both"></div>
        </div>
    </BodyContent>
    <FooterContent>
        ASP.NET Data View Control<br />
        ASP.NET Data Editors Library<br />
        ASP.NET Rating Control
    </FooterContent>
</PageControl>

@code {
    protected IEnumerable<string> Tokens { get; set; } = new List<string>();
    protected IEnumerable<string> TokenData { get; set; } = new List<string>();

    protected IEnumerable<Metro_Area> MetroAreas { get; set; } = default!;
    protected IEnumerable<Hotel> Hotels { get; set; } = default!;
    protected IEnumerable<string> LocationData { get; set; } = DataProvider.LocationRatings;


    protected string SelectedLocation { get; set; } = default!;
    protected IEnumerable<RatingItem> SelectedRatings { get; set; } = default!;
    protected IEnumerable<RatingItem> RatingData = new List<RatingItem>
    {
        new RatingItem { ImageUrl = "/Content/Images/star1.png", Value = 1 },
        new RatingItem { ImageUrl = "/Content/Images/star2.png", Value = 2 },
        new RatingItem { ImageUrl = "/Content/Images/star3.png", Value = 3 },
        new RatingItem { ImageUrl = "/Content/Images/star4.png", Value = 4 },
        new RatingItem { ImageUrl = "/Content/Images/star5.png", Value = 5 }
    };

    protected int NightlyRateMin { get; set; } = 100;
    protected int NightlyRateMax { get; set; } = 999;

    protected int NightlyRateStart { get; set; } = 100;
    protected int NightlyRateEnd { get; set; } = 500;

    protected int CustomerRating { get; set; } = 1;
    protected int CustomerRatingMin { get; set; } = 1;
    protected int CustomerRatingMax { get; set; } = 5;

    protected override string Name => "Results";    

    IEnumerable<Hotel> FindHotels()
    {
        return DataContext.Hotels
                    .Include(h => h.City)
                    .Include(h => h.Rooms)
                    .Include(h => h.Pictures).ToList()
                    .Where(hotel => CheckHotelFilters(hotel));
    }

    bool CheckHotelFilters(Hotel hotel)
    {
        return hotel?.City?.Metro_Area_ID == State.Metro_Area.ID &&
               NightlyRateStart <= hotel.EndPrice &&
               hotel.StartPrice <= (NightlyRateEnd + 1) &&
               hotel.Customer_Rating >= CustomerRating &&
               State.FilterOurRatingArray.Contains((int)Math.Floor(hotel?.Our_Rating??0)) &&
               DataProvider.LocationRatings.IndexOf(hotel?.Location_Rating??"BBB") >= DataProvider.LocationRatings.IndexOf(SelectedLocation.ToString())
               ;
    }

    int GetMinRoomPrice(Metro_Area area)
    {
        var result = DataContext.Cities?.Include(c => c.Hotels)
                        .ThenInclude(h => h.Rooms)
                        .Where(c => c.Metro_Area_ID == area.ID)
                        .SelectMany(c => c.Hotels).SelectMany(h => h.Rooms)
                        .Min(r => r.Nighly_Rate);
        return Convert.ToInt32(Math.Floor(result??0));
    }
    int GetMaxRoomPrice(Metro_Area area)
    {
        var result = DataContext.Cities.Include(c => c.Hotels)
                        .ThenInclude(h => h.Rooms)
                        .Where(c => c.Metro_Area_ID == area.ID)
                        .SelectMany(c => c.Hotels).SelectMany(h => h.Rooms)
                        .Max(r => r.Nighly_Rate);
        return Convert.ToInt32(Math.Floor(result??decimal.MaxValue));
    }

    protected async override Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        RefreshFilters();
        Hotels = FindHotels().ToList();
        MetroAreas = await DataContext.Metro_Areas.ToListAsync();
    }

    protected void RefreshFilters()
    {
        //LocationComboBox.DataBindItems();
        //LocationComboBox.SelectedItem = LocationComboBox.Items.FindByValue(State.Metro_Area.ID);

        NightlyRateMax = GetMaxRoomPrice(State.Metro_Area);
        NightlyRateMin = GetMinRoomPrice(State.Metro_Area);

        NightlyRateStart = GetIntValue(State.FilterMinPrice, NightlyRateMin, NightlyRateMax, NightlyRateMin);
        NightlyRateEnd = GetIntValue(State.FilterMaxPrice, NightlyRateMin, NightlyRateMax, NightlyRateMax);

        CustomerRating = GetIntValue(State.FilterCustomerRating, CustomerRatingMin, CustomerRatingMax, CustomerRatingMin);
        SelectedLocation = State.FilterLocationRating ?? "BBB";


        // MapImage.ImageUrl = State.Metro_Area.Map_ImageUrl;

        // for (int i = 0; i < 5; i++)
        // {
        //     OurRatingCheckBoxList.Items[i].Selected = State.FilterOurRatingArray.Contains(i + 1);
        // }
        var rating = State.FilterOurRatingArray ?? [ 1, 2, 3, 4, 5 ];
        SelectedRatings = RatingData.Where(r => rating.Contains(r.Value));
        EnsureTokensList(false);
        StateHasChanged();
      

    }

    void EnsureToken(string text, bool updateFilter, Action changeFilterAction)
    {
        if (updateFilter && !Tokens.Contains(text))
            changeFilterAction();
        else if (!updateFilter)
            ((List<string>)Tokens).Add(text);
    }

    void EnsureTokensList(bool updateFilter)
    {
        if (!updateFilter)
            Tokens = new List<string>();
        EnsureToken(State.Metro_Area.Area_Name, updateFilter, () => NavigationManager.NavigateTo("/"));
        if (NightlyRateStart != NightlyRateMin || NightlyRateEnd != NightlyRateMax)
        {
            EnsureToken(string.Format("${0}-${1}", NightlyRateStart, NightlyRateEnd), updateFilter, () =>
            {
                State.FilterMaxPrice = null!;
                State.FilterMinPrice = null!;
            });
        }
        if (CustomerRating > 1)
            EnsureToken(string.Format("{0}+ Customer Rating", CustomerRating), updateFilter, () => State.FilterCustomerRating = null);
        if (State.FilterOurRatingArray.Length < 5)
            EnsureToken(string.Format("{0} Stars", string.Join(", ", State.FilterOurRatingArray)), updateFilter, () => State.FilterOurRating = null);
        if (!string.IsNullOrEmpty(State.FilterLocationRating) && State.FilterLocationRating != "BBB")
            EnsureToken(string.Format("{0}+ Location Rating", State.FilterLocationRating), updateFilter, () => State.FilterLocationRating = null);
        if (updateFilter)
            NavigationManager.NavigateTo("/results?" + DataProvider.GetQueryString(State.GetQueryParameters(true)));
    }

    protected int GetIntValue(string textValue, decimal minValue, decimal maxValue, decimal defaultValue)
    {
        if (string.IsNullOrEmpty(textValue))
            return Convert.ToInt32(defaultValue);
        var value = Convert.ToDecimal(textValue);
        return Convert.ToInt32(Math.Min(Math.Max(minValue, value), maxValue));
    }

    protected string GetHotelDetailsUrl(object hotelID)
    {
        var parameters = State.GetQueryParameters(false);
        parameters["hotelID"] = hotelID.ToString();
        return string.Format("/details?{0}", DataProvider.GetQueryString(parameters));
    }

    void SelectedAreaChanged(Metro_Area area)
    {
        State.Metro_Area = area;
    }

    void OnCustomizeElement(GridCustomizeElementEventArgs args)
    {
        if (args.ElementType == GridElementType.HeaderRow)
        {
            args.CssClass = "d-none";
        }
        else if (args.ElementType == GridElementType.DetailCell)
        {
            args.Style = "border-left: none; border-right: none;";
        }
    }

    protected void BookItButton_Click(Hotel hotel)
    {
        var parameters = State.GetQueryParameters(false);
        parameters["hotelID"] = hotel.ID.ToString();
        parameters["roomID"] = hotel.Rooms.Aggregate((room, r) => (room == null || r.Nighly_Rate.Value < room.Nighly_Rate.Value ? room : r)).ID.ToString();
        NavigationManager.NavigateTo($"/booking?{DataProvider.GetQueryString(parameters)}");
    }

    protected void ApplyFilterButton_Click(MouseEventArgs args)
    {
        var parameters = State.GetQueryParameters(false);
        parameters["location"] = State.Metro_Area.ID.ToString();
        if (NightlyRateStart > NightlyRateMin)
            parameters["minprice"] = NightlyRateStart.ToString();
        if (NightlyRateEnd < NightlyRateMax)
            parameters["maxprice"] = NightlyRateEnd.ToString();
        //if (CustomerRating != null)
        parameters["custrating"] = CustomerRating.ToString();
        if (!string.IsNullOrEmpty(SelectedLocation))
            parameters["locrating"] = SelectedLocation;
        if (SelectedRatings.Count() > 0)
            parameters["ourrating"] = string.Join(",", SelectedRatings.Select(r => r.Value));

        Hotels = FindHotels().ToList();
        NavigationManager.NavigateTo("results?" + DataProvider.GetQueryString(parameters));
    }

    public class RatingItem
    {
        public string? ImageUrl { get; set; }
        public int Value { get; set; }
    }

}
